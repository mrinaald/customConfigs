" **************************************************************
" Enabling configuration
" **************************************************************
if !has('nvim')
  set nocompatible                    " Vi IMproved, required
endif


" Visit https://github.com/junegunn/vim-plug to install vim-plug which can
" handle the installation of plugins mentioned in plug#begin()..plug#end()

" **************************************************************
" Installing Plugins
" **************************************************************
call plug#begin('~/.vim/plugged')

" Themes/Interface plugins
Plug 'vim-airline/vim-airline'			" For statusline
Plug 'vim-airline/vim-airline-themes'
Plug 'nielsmadan/harlequin'				" Color scheme
" Plug 'nanotech/jellybeans.vim'			" Color scheme
" Plug 'sjl/badwolf'						" Color scheme
" Plug 'tomasr/molokai'					" Color scheme
Plug 'colepeters/spacemacs-theme.vim'	" Color scheme
Plug 'altercation/vim-colors-solarized'	" Color scheme
" Plug 'ajh17/Spacegray.vim'				" Color scheme


" Plugin for commenting code
Plug 'scrooloose/nerdcommenter'

" File system explorer
Plug 'scrooloose/nerdtree'

" Make NerdTree appear on all tabs
" Plug 'jistr/vim-nerdtree-tabs'

" Display trailing whitespace
" Plug 'bronson/vim-trailing-whitespace'

" Git Integrations
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'

" Plugin for Syntax checking
Plug 'vim-syntastic/syntastic'

" Autocompletion plugin
" Plug 'Shougo/neocomplete.vim'
" Plug 'Shougo/neosnippet.vim'

" Snippets
" Plug 'Shougo/neosnippet-snippets'
" Plug 'honza/vim-snippets'
" Plug 'SirVer/ultisnips'

" For swaping windows when working in splits
" Plug 'wesQ3/vim-windowswap'

" Huge Language support pack
Plug 'sheerun/vim-polyglot'

" Handling white-spaces
Plug 'ntpeters/vim-better-whitespace'

" Allows to use <Tab> for all Autocompletions
Plug 'ervandew/supertab'

" Rich text editor
" Plug 'reedes/vim-pencil'

" Popup for auto complete
" Plug 'vim-scripts/AutoComplPop'

" Tagbar
"Plug 'majutsushi/tagbar'

" Fuzzy finder
Plug 'ctrlpvim/ctrlp.vim'

" For moving around faster
Plug 'easymotion/vim-easymotion'

"This plugin provides mappings to easily delete, change and add surroundings
"like parenthesis, brackets, quotes, XML tags, etc., in pairs.
"Plug 'tpope/vim-surround'


"It is a good starting point for anyone intending to use VIM for development
"running equally well on Windows, Linux, *nix and Mac. Visit
" https://github.com/spf13/spf13-vim
"Plug 'spf13/spf13-vim'

"Plug 'valloric/youcompleteme'

" Plugin for having cool icons for other plugins.
" 'Should' be loaded in the end
" Install the specific fonts (set for the terminal) from official github repo
Plug 'ryanoasis/vim-devicons'

call plug#end()

filetype plugin indent on
" **************************************************************
" Configurations
" **************************************************************
syntax on
set t_Co=256
set background=dark
colorscheme harlequin
set number
set ruler
set hlsearch
set mouse=a
set nowrap
filetype plugin on

" Changing <leader> key to ','
let mapleader = ","

" Setting syntax highlighting for some unknown file types
autocmd BufRead,BufNewFile *.ypp set filetype=cpp
" autocmd BufRead,BufNewFile *.hpp set filetype=cpp

" Set Proper Tabs
set tabstop=4
set shiftwidth=4
set smarttab
" set expandtab

" Required for git gutter. (Default is 4000 ms)
set updatetime=1000

" To show which command is typed
set showcmd

" Enable highlighting of the current line
set cursorline

" Enable Syntax Highlighting
syntax on

nmap <C-o> :tabnew 
nmap <C-h> :tabp<CR>
nmap <C-l> :tabn<CR>
nmap <C-j> :tabfirst<CR>
nmap <C-k> :tablast<CR>

" ************* disable arrow keys *****************************
let g:arrow_resize_mode=1
" Disable arrow movement, resize splits instead.
if get(g:, 'arrow_resize_mode')
	nnoremap <Up>    :resize +2<CR>
	nnoremap <Down>  :resize -2<CR>
	nnoremap <Left>  :vertical resize +2<CR>
	nnoremap <Right> :vertical resize -2<CR>
endif


" ************* vim-devicons ***********************************
set encoding=UTF-8

" We need this for plugins like Syntastic and vim-gitgutter which put symbols
" in the sign column.
hi clear SignColumn


" ************* vim-airline ************************************
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme = 'powerlineish'
" Always show statusbar
set laststatus=2

" air-line
let g:Powerline_symbols = 'unicode'
let g:airline_powerline_fonts = 1

"if !exists('g:airline_symbols')
    "let g:airline_symbols = {}
"endif

" unicode symbols
"let g:airline_left_sep = '¬ª'
"let g:airline_left_sep = '‚ñ∂'
"let g:airline_right_sep = '¬´'
"let g:airline_right_sep = '‚óÄ'
"let g:airline_symbols.crypt = 'üîí'
"let g:airline_symbols.linenr = '‚ò∞'
"let g:airline_symbols.linenr = '‚êä'
"let g:airline_symbols.linenr = '‚ê§'
"let g:airline_symbols.linenr = '¬∂'
"let g:airline_symbols.maxlinenr = ''
"let g:airline_symbols.maxlinenr = '„èë'
"let g:airline_symbols.branch = '‚éá'
"let g:airline_symbols.paste = 'œÅ'
"let g:airline_symbols.paste = '√û'
"let g:airline_symbols.paste = '‚à•'
"let g:airline_symbols.spell = 'Íû®'
"let g:airline_symbols.notexists = '‚àÑ'
"let g:airline_symbols.whitespace = 'Œû'

" powerline symbols
"let g:airline_left_sep = 'ÓÇ∞'
"let g:airline_left_alt_sep = 'ÓÇ±'
"let g:airline_right_sep = 'ÓÇ≤'
"let g:airline_right_alt_sep = 'ÓÇ≥'
"let g:airline_symbols.branch = 'ÓÇ†'
"let g:airline_symbols.readonly = 'ÓÇ¢'
"let g:airline_symbols.linenr = '‚ò∞'
"let g:airline_symbols.maxlinenr = 'ÓÇ°'

" old vim-powerline symbols
"let g:airline_left_sep = '‚ÆÄ'
"let g:airline_left_alt_sep = '‚ÆÅ'
"let g:airline_right_sep = '‚ÆÇ'
"let g:airline_right_alt_sep = '‚ÆÉ'
"let g:airline_symbols.branch = '‚≠†'
"let g:airline_symbols.readonly = '‚≠§'
"let g:airline_symbols.linenr = '‚≠°'


" ************* nerd-commenter *********************************
nmap // <leader>c<Space>
vmap // <leader>c<Space>

" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Set a language to use its alternate delimiters by default
" let g:NERDAltDelims_java = 1

" Add your own custom formats or override the defaults
" let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1


" ************* NERDTree ***************************************
"open a NERDTree automatically when vim starts up
"autocmd vimenter * NERDTree

"open a NERDTree automatically when vim starts up if no files were specified
"autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

"open NERDTree with Ctrl+n
map <leader>n :NERDTreeToggle<CR>

"close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif


" ************* NERDTreeTabs ***********************************
"map <Leader>n <plug>NERDTreeTabsToggle<CR>


" ************* Git-Gutter *************************************
" By default the sign column will appear when there are signs
" to show and disappear when there aren't. To always have the
" sign column
if exists('&signcolumn')  " Vim 7.4.2201
  set signcolumn=yes
else
  let g:gitgutter_sign_column_always = 1
endif


" ************* Syntastic **************************************
let g:syntastic_error_symbol = '‚úò'
let g:syntastic_warning_symbol = '‚ñ≤'
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0


" ************* Window Swap ************************************
"let g:windowswap_map_keys = 0 "prevent default bindings
"nnoremap <silent> <leader>yw :call WindowSwap#MarkWindowSwap()<CR>
"nnoremap <silent> <leader>pw :call WindowSwap#DoWindowSwap()<CR>
"nnoremap <silent> <leader>ww :call WindowSwap#EasyWindowSwap()<CR>



" ************* NeoComplete ************************************
" Disable AutoComplPop.
" let g:acp_enableAtStartup = 0
" Use neocomplete.
" let g:neocomplete#enable_at_startup = 1
" Use smartcase.
" let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
" let g:neocomplete#sources#syntax#min_keyword_length = 3

" Define dictionary.
" let g:neocomplete#sources#dictionary#dictionaries = {
"     \ 'default' : '',
"     \ 'vimshell' : $HOME.'/.vimshell_hist',
"     \ 'scheme' : $HOME.'/.gosh_completions'
"         \ }

" Define keyword.
" if !exists('g:neocomplete#keyword_patterns')
"     let g:neocomplete#keyword_patterns = {}
" endif
" let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
" inoremap <expr><C-g>     neocomplete#undo_completion()
" inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
" inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
" function! s:my_cr_function()
"   return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " " For no inserting <CR> key.
  " " return pumvisible() ? "\<C-y>" : "\<CR>"
" endfunction
" <TAB>: completion.
" inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" " <C-h>, <BS>: close popup and delete backword char.
" inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
" inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

" AutoComplPop like behavior.
" let g:neocomplete#enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
" autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
" autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
" autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
" autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
" autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
" if !exists('g:neocomplete#sources#omni#input_patterns')
"   let g:neocomplete#sources#omni#input_patterns = {}
" endif
"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
" let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'



" ************* NeoSnippet ************************************
" Plugin key-mappings.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
" imap <C-k>     <Plug>(neosnippet_expand_or_jump)
" smap <C-k>     <Plug>(neosnippet_expand_or_jump)
" xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
"imap <expr><TAB>
" \ pumvisible() ? "\<C-n>" :
" \ neosnippet#expandable_or_jumpable() ?
" \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
" smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
" \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For conceal markers.
" if has('conceal')
"   set conceallevel=2 concealcursor=niv
" endif

" Tell Neosnippet about the other snippets
"let g:neosnippet#snippets_directory='~/.vim/plugged/vim-snippets/snippets'


" ************* Easy-Motion ************************************
" <Leader>f{char} to move to {char}
map  <Leader>f <Plug>(easymotion-bd-f)
nmap <Leader>f <Plug>(easymotion-overwin-f)

" s{char}{char} to move to {char}{char}
nmap s <Plug>(easymotion-overwin-f2)

" Move to line
map <Leader>L <Plug>(easymotion-bd-jk)
nmap <Leader>L <Plug>(easymotion-overwin-line)

" Move to word
map  <Leader>w <Plug>(easymotion-bd-w)
nmap <Leader>w <Plug>(easymotion-overwin-w)


" ************* UltiSnips **************************************
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
"let g:UltiSnipsExpandTrigger="<tab>"
"let g:UltiSnipsJumpForwardTrigger="<c-b>"
"let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
"let g:UltiSnipsEditSplit="vertical"
